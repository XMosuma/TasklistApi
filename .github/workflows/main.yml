name: TaskList API CI/CD

on:
  push:
    branches: [ main, Dev]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tasklist_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Run tests
      run: mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tasklist_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRATION: 86400000

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: mvn clean package -DskipTests
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tasklist_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: tasklist-api-jar
        path: target/*.jar
        retention-days: 7

  docker-build-push:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Convert repository name to lowercase
      id: lower
      run: |
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        echo "REPO_LOWER=$REPO_LOWER" >> $GITHUB_ENV
        echo "✅ Lowercase repo name: $REPO_LOWER"

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: tasklist-api-jar
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ env.REPO_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/Dev' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=ghcr.io/${{ env.REPO_LOWER }}:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ env.REPO_LOWER }}:buildcache,mode=max


  deploy-wsl2:
    name: Deploy to Local WSL2 VM
    needs: docker-build-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    # ✅ Inject GitHub Secrets as Environment Variables
    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase repository name
      id: repo
      run: |
        REPO_NAME="${{ github.repository }}"
        echo "repo_lower=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Get Docker bridge IP
      id: docker_ip
      run: |
        DOCKER_HOST_IP=$(ip -4 addr show docker0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
        echo "docker_host_ip=$DOCKER_HOST_IP" >> $GITHUB_ENV
        echo "Docker host IP: $DOCKER_HOST_IP"

    - name: Setup Docker environment
      run: |
        export PATH="/mnt/c/Program Files/Docker/Docker/resources/bin:$PATH"
        docker --version

    - name: Ensure Postgres is running
      run: |
        export PATH="/mnt/c/Program Files/Docker/Docker/resources/bin:$PATH"
        if ! docker ps | grep -q tasklist-postgres; then
          echo "Starting Postgres container..."
          
          # Remove old container if exists
          docker rm -f tasklist-postgres 2>/dev/null || true
          
          # Start new postgres container
          docker run -d \
            --name tasklist-postgres \
            -p 5432:5432 \
            -e POSTGRES_DB=tasklist_db \
            -e POSTGRES_USER=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -v postgres-data:/var/lib/postgresql/data \
            postgres:15
          
          echo "Waiting for Postgres to be ready..."
          sleep 10
        else
          echo "Postgres container is already running"
        fi

    - name: Pull latest Docker image
      run: |
        echo "Pulling latest image..."
        docker pull ghcr.io/${{ env.repo_lower }}:latest

    - name: Restart TaskList API container
      run: |
        echo "Restarting container..."
        docker stop tasklist-api || true
        docker rm tasklist-api || true
        
        docker run -d \
          --name tasklist-api \
          -p 8083:8081 \
          -e SPRING_DATASOURCE_URL="jdbc:postgresql://${{ env.docker_host_ip }}:5432/tasklist_db" \
          -e SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
          -e SPRING_DATASOURCE_PASSWORD="${POSTGRES_PASSWORD}" \
          -e JWT_SECRET="${JWT_SECRET}" \
          --add-host=host.docker.internal:host-gateway \
          ghcr.io/${{ env.repo_lower }}:latest

    - name: Verify deployment
      run: |
        echo "Waiting for application to start..."
        sleep 15
        
        if docker ps | grep -q tasklist-api; then
          echo "✅ Container is running"
          if curl -f http://localhost:8083/actuator/health > /dev/null 2>&1; then
            echo "✅ Application health check passed"
          else
            echo "⚠️  Application health check failed"
            docker logs tasklist-api --tail 50
          fi
        else
          echo "❌ Container failed to start"
          docker logs tasklist-api --tail 50
          exit 1
        fi


  update-k8s-manifests:
    name: Update Kubernetes Manifests for ArgoCD
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set lowercase repository name
      run: |
        REPO_NAME="${{ github.repository }}"
        echo "REPO_LOWER=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
    
    - name: Update image tag in Kubernetes manifests
      run: |
        # Update the image tag in the deployment manifest
        sed -i "s|image: ghcr.io/.*:.*|image: ghcr.io/$REPO_LOWER:${{ github.sha }}|g" k8s/deployment.yaml
    
    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add k8s/deployment.yaml
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update image to ${{ github.sha }}" && git push)